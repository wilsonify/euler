import itertools

from euler_python.utils import eulerlib


def problem012():
    """


    The sequence of triangle numbers is generated by adding the natural
       numbers. So the 7^th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
       28. The first ten terms would be:

                        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

       Let us list the factors of the first seven triangle numbers:

          1: 1
          3: 1,3
          6: 1,2,3,6
         10: 1,2,5,10
         15: 1,3,5,15
         21: 1,3,7,21
         28: 1,2,4,7,14,28

       We can see that 28 is the first triangle number to have over five
       divisors.

       What is the value of the first triangle number to have over five hundred
       divisors?
    """
    triangle = 0
    for i in itertools.count(1):
        triangle += i  # This is the ith triangle number, i.e. num = 1 + 2 + ... + i = i * (i + 1) / 2
        if num_divisors(triangle) > 500:
            return triangle


# Returns the number of integers in the range [1, n] that divide n.
def num_divisors(n):
    end = eulerlib.sqrt(n)
    result = sum(2
                 for i in range(1, end + 1)
                 if n % i == 0)
    if end ** 2 == n:
        result -= 1
    return result


if __name__ == "__main__":
    print(problem012())
